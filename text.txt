// Setup routes for all pages
func setupRoutes(router *gin.Engine) {
	// Define pages and their respective routes
	pages := []string{"index", "services", "courses", "exclusives", "photos", "support", "videos", "author"}

	// Loop through pages and register routes
	for _, page := range pages {
		page := page // Fix closure issue

		router.GET("/"+page, func(c *gin.Context) {
			// Fetch the data for the page
			if data, exists := pageData[page]; exists {
				c.HTML(http.StatusOK, page+".html", data)
			} else {
				// If no data is found, return a generic page
				c.HTML(http.StatusOK, "layout.html", gin.H{"Title": page})
			}
		})
	}
}

/////////////////
func main() {
	router := gin.Default()

	// Serve static files (CSS, images, JS)
	router.Static("/static", "./static")

	// Load all HTML templates from all subdirectories (recursively)
	router.LoadHTMLGlob("templates/**/*.html")

	// Route for Services Page
	router.GET("/services/:service_name", func(c *gin.Context) {
		serviceName := c.Param("service_name")
		templatePath := "services/" + serviceName + "/service.html"

		// Check if the service exists in the pageData
		if data, exists := pageData["services"]; exists {
			// Render the template for the specific service
			c.HTML(http.StatusOK, templatePath, data)
		} else {
			// If service doesn't exist, show a 404 or a default page
			c.HTML(http.StatusNotFound, "404.html", gin.H{
				"Message": "Service not found",
			})
		}
	})

	// Start the server
	router.Run(":8080")
}
